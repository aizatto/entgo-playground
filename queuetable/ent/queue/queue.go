// Code generated by ent, DO NOT EDIT.

package queue

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the queue type in the database.
	Label = "queue"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldInstruction holds the string denoting the instruction field in the database.
	FieldInstruction = "instruction"
	// FieldObjTable holds the string denoting the obj_table field in the database.
	FieldObjTable = "obj_table"
	// FieldObjID holds the string denoting the obj_id field in the database.
	FieldObjID = "obj_id"
	// Table holds the table name of the queue in the database.
	Table = "queues"
)

// Columns holds all SQL columns for queue fields.
var Columns = []string{
	FieldID,
	FieldInstruction,
	FieldObjTable,
	FieldObjID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// ObjTable defines the type for the "obj_table" enum field.
type ObjTable string

// ObjTable values.
const (
	ObjTableUsers ObjTable = "users"
)

func (ot ObjTable) String() string {
	return string(ot)
}

// ObjTableValidator is a validator for the "obj_table" field enum values. It is called by the builders before save.
func ObjTableValidator(ot ObjTable) error {
	switch ot {
	case ObjTableUsers:
		return nil
	default:
		return fmt.Errorf("queue: invalid enum value for obj_table field: %q", ot)
	}
}

// OrderOption defines the ordering options for the Queue queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByInstruction orders the results by the instruction field.
func ByInstruction(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInstruction, opts...).ToFunc()
}

// ByObjTable orders the results by the obj_table field.
func ByObjTable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldObjTable, opts...).ToFunc()
}

// ByObjID orders the results by the obj_id field.
func ByObjID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldObjID, opts...).ToFunc()
}
