// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"queuetable/ent/queue"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Queue is the model entity for the Queue schema.
type Queue struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Instruction holds the value of the "instruction" field.
	Instruction string `json:"instruction,omitempty"`
	// ObjTable holds the value of the "obj_table" field.
	ObjTable queue.ObjTable `json:"obj_table,omitempty"`
	// ObjID holds the value of the "obj_id" field.
	ObjID        uuid.UUID `json:"obj_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Queue) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case queue.FieldID:
			values[i] = new(sql.NullInt64)
		case queue.FieldInstruction, queue.FieldObjTable:
			values[i] = new(sql.NullString)
		case queue.FieldObjID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Queue fields.
func (q *Queue) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case queue.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			q.ID = int(value.Int64)
		case queue.FieldInstruction:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field instruction", values[i])
			} else if value.Valid {
				q.Instruction = value.String
			}
		case queue.FieldObjTable:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field obj_table", values[i])
			} else if value.Valid {
				q.ObjTable = queue.ObjTable(value.String)
			}
		case queue.FieldObjID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field obj_id", values[i])
			} else if value != nil {
				q.ObjID = *value
			}
		default:
			q.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Queue.
// This includes values selected through modifiers, order, etc.
func (q *Queue) Value(name string) (ent.Value, error) {
	return q.selectValues.Get(name)
}

// Update returns a builder for updating this Queue.
// Note that you need to call Queue.Unwrap() before calling this method if this Queue
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Queue) Update() *QueueUpdateOne {
	return NewQueueClient(q.config).UpdateOne(q)
}

// Unwrap unwraps the Queue entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (q *Queue) Unwrap() *Queue {
	_tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("ent: Queue is not a transactional entity")
	}
	q.config.driver = _tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Queue) String() string {
	var builder strings.Builder
	builder.WriteString("Queue(")
	builder.WriteString(fmt.Sprintf("id=%v, ", q.ID))
	builder.WriteString("instruction=")
	builder.WriteString(q.Instruction)
	builder.WriteString(", ")
	builder.WriteString("obj_table=")
	builder.WriteString(fmt.Sprintf("%v", q.ObjTable))
	builder.WriteString(", ")
	builder.WriteString("obj_id=")
	builder.WriteString(fmt.Sprintf("%v", q.ObjID))
	builder.WriteByte(')')
	return builder.String()
}

// Queues is a parsable slice of Queue.
type Queues []*Queue
