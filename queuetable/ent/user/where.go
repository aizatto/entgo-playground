// Code generated by ent, DO NOT EDIT.

package user

import (
	"queuetable/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// QueueObjID applies equality check predicate on the "queue_obj_id" field. It's identical to QueueObjIDEQ.
func QueueObjID(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldQueueObjID, v))
}

// QueueObjIDEQ applies the EQ predicate on the "queue_obj_id" field.
func QueueObjIDEQ(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldQueueObjID, v))
}

// QueueObjIDNEQ applies the NEQ predicate on the "queue_obj_id" field.
func QueueObjIDNEQ(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldQueueObjID, v))
}

// QueueObjIDIn applies the In predicate on the "queue_obj_id" field.
func QueueObjIDIn(vs ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldIn(FieldQueueObjID, vs...))
}

// QueueObjIDNotIn applies the NotIn predicate on the "queue_obj_id" field.
func QueueObjIDNotIn(vs ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldQueueObjID, vs...))
}

// QueueObjIDGT applies the GT predicate on the "queue_obj_id" field.
func QueueObjIDGT(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGT(FieldQueueObjID, v))
}

// QueueObjIDGTE applies the GTE predicate on the "queue_obj_id" field.
func QueueObjIDGTE(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldQueueObjID, v))
}

// QueueObjIDLT applies the LT predicate on the "queue_obj_id" field.
func QueueObjIDLT(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLT(FieldQueueObjID, v))
}

// QueueObjIDLTE applies the LTE predicate on the "queue_obj_id" field.
func QueueObjIDLTE(v uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldQueueObjID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
