// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"queuetable/ent/predicate"
	"queuetable/ent/queue"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// QueueUpdate is the builder for updating Queue entities.
type QueueUpdate struct {
	config
	hooks    []Hook
	mutation *QueueMutation
}

// Where appends a list predicates to the QueueUpdate builder.
func (qu *QueueUpdate) Where(ps ...predicate.Queue) *QueueUpdate {
	qu.mutation.Where(ps...)
	return qu
}

// SetInstruction sets the "instruction" field.
func (qu *QueueUpdate) SetInstruction(s string) *QueueUpdate {
	qu.mutation.SetInstruction(s)
	return qu
}

// SetNillableInstruction sets the "instruction" field if the given value is not nil.
func (qu *QueueUpdate) SetNillableInstruction(s *string) *QueueUpdate {
	if s != nil {
		qu.SetInstruction(*s)
	}
	return qu
}

// SetObjTable sets the "obj_table" field.
func (qu *QueueUpdate) SetObjTable(qt queue.ObjTable) *QueueUpdate {
	qu.mutation.SetObjTable(qt)
	return qu
}

// SetNillableObjTable sets the "obj_table" field if the given value is not nil.
func (qu *QueueUpdate) SetNillableObjTable(qt *queue.ObjTable) *QueueUpdate {
	if qt != nil {
		qu.SetObjTable(*qt)
	}
	return qu
}

// SetObjID sets the "obj_id" field.
func (qu *QueueUpdate) SetObjID(u uuid.UUID) *QueueUpdate {
	qu.mutation.SetObjID(u)
	return qu
}

// SetNillableObjID sets the "obj_id" field if the given value is not nil.
func (qu *QueueUpdate) SetNillableObjID(u *uuid.UUID) *QueueUpdate {
	if u != nil {
		qu.SetObjID(*u)
	}
	return qu
}

// Mutation returns the QueueMutation object of the builder.
func (qu *QueueUpdate) Mutation() *QueueMutation {
	return qu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QueueUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, qu.sqlSave, qu.mutation, qu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QueueUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QueueUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QueueUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qu *QueueUpdate) check() error {
	if v, ok := qu.mutation.ObjTable(); ok {
		if err := queue.ObjTableValidator(v); err != nil {
			return &ValidationError{Name: "obj_table", err: fmt.Errorf(`ent: validator failed for field "Queue.obj_table": %w`, err)}
		}
	}
	return nil
}

func (qu *QueueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := qu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(queue.Table, queue.Columns, sqlgraph.NewFieldSpec(queue.FieldID, field.TypeInt))
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.Instruction(); ok {
		_spec.SetField(queue.FieldInstruction, field.TypeString, value)
	}
	if value, ok := qu.mutation.ObjTable(); ok {
		_spec.SetField(queue.FieldObjTable, field.TypeEnum, value)
	}
	if value, ok := qu.mutation.ObjID(); ok {
		_spec.SetField(queue.FieldObjID, field.TypeUUID, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{queue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	qu.mutation.done = true
	return n, nil
}

// QueueUpdateOne is the builder for updating a single Queue entity.
type QueueUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *QueueMutation
}

// SetInstruction sets the "instruction" field.
func (quo *QueueUpdateOne) SetInstruction(s string) *QueueUpdateOne {
	quo.mutation.SetInstruction(s)
	return quo
}

// SetNillableInstruction sets the "instruction" field if the given value is not nil.
func (quo *QueueUpdateOne) SetNillableInstruction(s *string) *QueueUpdateOne {
	if s != nil {
		quo.SetInstruction(*s)
	}
	return quo
}

// SetObjTable sets the "obj_table" field.
func (quo *QueueUpdateOne) SetObjTable(qt queue.ObjTable) *QueueUpdateOne {
	quo.mutation.SetObjTable(qt)
	return quo
}

// SetNillableObjTable sets the "obj_table" field if the given value is not nil.
func (quo *QueueUpdateOne) SetNillableObjTable(qt *queue.ObjTable) *QueueUpdateOne {
	if qt != nil {
		quo.SetObjTable(*qt)
	}
	return quo
}

// SetObjID sets the "obj_id" field.
func (quo *QueueUpdateOne) SetObjID(u uuid.UUID) *QueueUpdateOne {
	quo.mutation.SetObjID(u)
	return quo
}

// SetNillableObjID sets the "obj_id" field if the given value is not nil.
func (quo *QueueUpdateOne) SetNillableObjID(u *uuid.UUID) *QueueUpdateOne {
	if u != nil {
		quo.SetObjID(*u)
	}
	return quo
}

// Mutation returns the QueueMutation object of the builder.
func (quo *QueueUpdateOne) Mutation() *QueueMutation {
	return quo.mutation
}

// Where appends a list predicates to the QueueUpdate builder.
func (quo *QueueUpdateOne) Where(ps ...predicate.Queue) *QueueUpdateOne {
	quo.mutation.Where(ps...)
	return quo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (quo *QueueUpdateOne) Select(field string, fields ...string) *QueueUpdateOne {
	quo.fields = append([]string{field}, fields...)
	return quo
}

// Save executes the query and returns the updated Queue entity.
func (quo *QueueUpdateOne) Save(ctx context.Context) (*Queue, error) {
	return withHooks(ctx, quo.sqlSave, quo.mutation, quo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QueueUpdateOne) SaveX(ctx context.Context) *Queue {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QueueUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QueueUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (quo *QueueUpdateOne) check() error {
	if v, ok := quo.mutation.ObjTable(); ok {
		if err := queue.ObjTableValidator(v); err != nil {
			return &ValidationError{Name: "obj_table", err: fmt.Errorf(`ent: validator failed for field "Queue.obj_table": %w`, err)}
		}
	}
	return nil
}

func (quo *QueueUpdateOne) sqlSave(ctx context.Context) (_node *Queue, err error) {
	if err := quo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(queue.Table, queue.Columns, sqlgraph.NewFieldSpec(queue.FieldID, field.TypeInt))
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Queue.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := quo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, queue.FieldID)
		for _, f := range fields {
			if !queue.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != queue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := quo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := quo.mutation.Instruction(); ok {
		_spec.SetField(queue.FieldInstruction, field.TypeString, value)
	}
	if value, ok := quo.mutation.ObjTable(); ok {
		_spec.SetField(queue.FieldObjTable, field.TypeEnum, value)
	}
	if value, ok := quo.mutation.ObjID(); ok {
		_spec.SetField(queue.FieldObjID, field.TypeUUID, value)
	}
	_node = &Queue{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{queue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	quo.mutation.done = true
	return _node, nil
}
